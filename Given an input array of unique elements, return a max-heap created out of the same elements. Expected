class MaxHeap {
    constructor() {
        this.heap = [];

    }
    swap(index1, index2) {
        console.log('idx1',index1,"idx2", index2)
        let temp = this.heap[index1];
        this.heap[index1] = this.heap[index2];
        this.heap[index2] = temp;
    }
    perculateUp(index) {
        if (index <= 0) return;
        let parent = Math.floor((index - 1) / 2);
        console.log(index, parent);
        if (this.heap[parent] < this.heap[index]) {
            this.swap(parent, index);
            this.perculateUp(parent);
        }
    }
    insert(value) {
        console.log(value)
        this.heap.push(value);
        let current = this.heap.length - 1;
        this.perculateUp(current);
    }
    print() {
        console.log(this.heap)
    }

    getMax() {
        return this.heap[0];
    }
    isEmpty() {
        return this.heap.length == 0;
    }

    search(vlaue){
        for(let i=0;i<this.heap.length;i++){
            if(this.heap[i]==value) 
            return true;
        }
        return false;
    }

    getGreaterIndex(leftChild,rightChild){
        let answer=leftChild;
        if(rightChild<this.heap.length && this.heap[leftChild]<this.heap[rightChild])
        answer=rightChild;
        return answer;
    }

    heapifyDown(index){
        let leftChild=2*index+1;
        let rightChild=2*index+2;
        console.log("leftchilde", leftChild, "rightchild", rightChild);
        if(leftChild>=this.heap.length) return;
        const greaterChildIndex=this.getGreaterIndex(leftChild,rightChild);
        console.log(greaterChildIndex)
        if(this.heap[greaterChildIndex]>this.heap[index]){
            this.swap(greaterChildIndex,index);
            this.heapifyDown(greaterChildIndex);
        }
    }

    popMax(){
        if(this.heap.isEmpty()) return undefined;
        const maxValue=this.heap[0];
        const lastValue=this.heap.pop();
        if(this.heap.isEmpty()) return maxValue;
        this.heap[0]=lastValue;
        this.heapifyDown(0);
        return maxValue;
    
    }

    
    heapify(arr){
        this.heap=arr;
      let last=this.heap.length-1;
      let lastParent=Math.floor((last-1)/2);
      let current=lastParent;
      while(current>=0){
        console.log("currunt"+ current);
        this.heapifyDown(current);
        current--;
      }
    }

}


let heap = new MaxHeap();
heap.insert(20);
heap.insert(10);
heap.insert(9);
heap.insert(5);
heap.insert(4);
heap.insert(1);
heap.print();
heap.heapifyDown(0)
console.log(heap.getGreaterIndex(4,3));
console.log('1,2,3,4,5,6,7,8,9')
heap.heapify([1,2,3,4,5,6,7,8,9])
heap.print();
